

package com.troy.cameralib;

import android.app.Activity;
import android.content.Context;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.ImageFormat;
import android.graphics.Matrix;
import android.graphics.Point;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.SurfaceTexture;
import android.hardware.camera2.CameraAccessException;
import android.hardware.camera2.CameraCaptureSession;
import android.hardware.camera2.CameraCharacteristics;
import android.hardware.camera2.CameraDevice;
import android.hardware.camera2.CameraManager;
import android.hardware.camera2.CaptureRequest;
import android.hardware.camera2.CaptureResult;
import android.hardware.camera2.TotalCaptureResult;
import android.hardware.camera2.params.StreamConfigurationMap;
import android.media.ImageReader;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerThread;
import android.support.annotation.NonNull;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.util.Size;
import android.view.Surface;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.troy.cameralib.util.Classifier;
import com.troy.cameralib.util.DisplayUtil;
import com.troy.cameralib.util.FileUtil;
import com.troy.cameralib.util.TensorFlowImageClassifier;
import com.troy.cameralib.view.AutoFitTextureView;
import com.troy.cameralib.view.MaskView;

import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.TimeUnit;

import rx.Observable;
import rx.Observer;
import rx.Subscriber;
import rx.android.schedulers.AndroidSchedulers;
import rx.schedulers.Schedulers;

@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)
public class AutoActivity extends AppCompatActivity implements View.OnClickListener {

    /**
     * Tag for the {@link Log}.
     */
    private static final String TAG = "TfLiteCameraDemo";

    private static final String FRAGMENT_DIALOG = "dialog";

    private static final String HANDLE_THREAD_NAME = "CameraBackground";

    private static final int PERMISSIONS_REQUEST_CODE = 1;

    private final Object lock = new Object();
    private boolean runClassifier = false;
    private boolean checkedPermissions = false;
    private boolean isgray = false;
    private boolean isauto = false;

    /**
     * ID of the current {@link CameraDevice}.
     */
    private String cameraId;

    /**
     * An {@link AutoFitTextureView} for camera preview.
     */
    private AutoFitTextureView textureView;

    /**
     * A {@link CameraCaptureSession } for camera preview.
     */
    private CameraCaptureSession captureSession;

    /**
     * A reference to the opened {@link CameraDevice}.
     */
    private CameraDevice cameraDevice;

    /**
     * The {@link android.util.Size} of camera preview.
     */
    private Size previewSize;

    /**
     * Max preview width that is guaranteed by Camera2 API
     */
    private static final int MAX_PREVIEW_WIDTH = 1920;

    /**
     * Max preview height that is guaranteed by Camera2 API
     */
    private static final int MAX_PREVIEW_HEIGHT = 1080;

    /**
     * An additional thread for running tasks that shouldn't block the UI.
     */
    private HandlerThread backgroundThread;

    /**
     * A {@link Handler} for running tasks in the background.
     */
    private Handler backgroundHandler;

    /**
     * An {@link ImageReader} that handles image capture.
     */
    private ImageReader imageReader;

    /**
     * {@link CaptureRequest.Builder} for the camera preview
     */
    private CaptureRequest.Builder previewRequestBuilder;

    /**
     * {@link CaptureRequest} generated by {@link #previewRequestBuilder}
     */
    private CaptureRequest previewRequest;

    /**
     * A {@link Semaphore} to prevent the app from exiting before closing the camera.
     */
    private Semaphore cameraOpenCloseLock = new Semaphore(1);
    private MaskView viewMask;
    private ImageView biankuang, showpic;
    private int x1;
    private int y1;
    private int x2;
    private int y2;
    private int mCameraWidth;
    private int mCameraHeight;
    private float cameraRatio = (float) 0.11; // 相机高宽比
    private ImageButton ibtCapture;
    private Button ivReturn;
    private int tmp = 100;
    private int 存储照片的宽;
    private int 存储照片的高;
    private int AutoFitTextureViewWidth;
    private int AutoFitTextureViewHeight;
    private TextView lighttext;

    private Handler mHandler1;
    private Runnable mRunnable;

    //tensorflow 相关
    private Classifier classifier;
    private static final int INPUT_Hight = 30;
    private static final int INPUT_Width = 200;
    private static final int IMAGE_MEAN = 255;
    private static final float IMAGE_STD = 255;
    private static final String INPUT_NAME = "fyx_inputs";
    private static final String OUTPUT_NAME = "fyx_dense_decoded";


    private static final String MODEL_FILE = "file:///android_asset/frozen_graph0511_mobile.pb";
    //private static final String MODEL_FILE = "file:///android_asset/frozen_graph2.pb";


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.autolayout);
        textureView = (AutoFitTextureView) findViewById(R.id.texture);

        viewMask = (MaskView) findViewById(R.id.view_mask);
        biankuang = (ImageView) findViewById(R.id.biankuang);
        ibtCapture = (ImageButton) findViewById(R.id.ibt_capture);
        ivReturn = (Button) findViewById(R.id.iv_return);
        lighttext = (TextView) findViewById(R.id.lighttext);
        showpic = (ImageView) findViewById(R.id.showpic);

        ibtCapture.setOnClickListener(this);
        ivReturn.setOnClickListener(this);
        showpic.setOnClickListener(this);

        mCameraWidth = (int) DisplayUtil.getScreenWidth(this);
        mCameraHeight = (int) DisplayUtil.getScreenHeight(this);
        Log.i("摄像机的参数:mCameraView的大小",
                "mCameraWidth:" + mCameraWidth + "mCameraHeight:" + mCameraHeight + "cameraRatio:"
                        + cameraRatio);

        RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(
                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
        layoutParams.width = mCameraWidth;
        layoutParams.height = mCameraHeight;
        viewMask.setLayoutParams(layoutParams);

        if (viewMask != null) {
            double 宽精度 = div(mCameraWidth, 1080, 5);
            x1 = (int) (宽精度 * 260);
            y1 = (int) (div(mCameraHeight, 1920, 5) * 653);
            x2 = (int) (宽精度 * 860);
            y2 = (int) (div(mCameraHeight, 1920, 5) * 735);
            Rect screenCenterRect = DisplayUtil.setMaskRect(x1, y1, x2, y2);
            viewMask.setCenterRect(screenCenterRect);

            ViewGroup.MarginLayoutParams margin9 = new ViewGroup.MarginLayoutParams(
                    biankuang.getLayoutParams());
            margin9.setMargins((int) (30 * 宽精度), (int) (200 * 宽精度), 0, 0);//在左边距400像素，顶边距10像素的位置显示图片
            RelativeLayout.LayoutParams layoutParams9 = new RelativeLayout.LayoutParams(margin9);
            layoutParams9.height = (int) (630 * 宽精度);//设置图片的高度
            layoutParams9.width = (int) (1000 * 宽精度); //设置图片的宽度
            biankuang.setLayoutParams(layoutParams9);
        }


        classifier =
                TensorFlowImageClassifier.create(
                        getAssets(),
                        MODEL_FILE,
                        INPUT_Hight,
                        INPUT_Width,
                        IMAGE_MEAN,
                        IMAGE_STD,
                        INPUT_NAME,
                        OUTPUT_NAME);

//        mHandler1 = new Handler(backgroundThread.getLooper());
//        mRunnable = new Runnable() {
//            @Override
//            public void run() {
//
//                classifyFrame();
//                if (isauto) {
//                    mHandler1.postDelayed(this, 300);
//                }
//            }
//        };

    }

    private Runnable periodicClassify =
            new Runnable() {
                @Override
                public void run() {
                    synchronized (lock) {

                        classifyFrame();

                    }
                    if (isauto) {
                        backgroundHandler.postDelayed(periodicClassify, 300);

                    }
                }
            };

    @Override
    public void onResume() {
        super.onResume();
        startBackgroundThread();

        // When the screen is turned off and turned back on, the SurfaceTexture is already
        // available, and "onSurfaceTextureAvailable" will not be called. In that case, we can open
        // a camera and start preview from here (otherwise, we wait until the surface is ready in
        // the SurfaceTextureListener).
        if (textureView.isAvailable()) {
            openCamera(textureView.getWidth(), textureView.getHeight());
        } else {
            textureView.setSurfaceTextureListener(surfaceTextureListener);
        }
    }

    private void startBackgroundThread() {
        backgroundThread = new HandlerThread(HANDLE_THREAD_NAME);
        backgroundThread.start();
        backgroundHandler = new Handler(backgroundThread.getLooper());
        synchronized (lock) {
            runClassifier = true;
        }

    }

    private void stopBackgroundThread() {
        backgroundThread.quitSafely();
        try {
            backgroundThread.join();
            backgroundThread = null;
            backgroundHandler = null;
            synchronized (lock) {
                runClassifier = false;
            }
        } catch (InterruptedException e) {
            Log.e(TAG, "Interrupted when stopping background thread", e);
        }
    }

    @Override
    public void onPause() {
        closeCamera();
        stopBackgroundThread();
        super.onPause();
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
    }

    @Override
    public void onClick(View view) {
        int i = view.getId();
        if (i == R.id.ibt_capture) {
            isauto = false;
            classifyFrame();

        } else if (i == R.id.iv_return) {
            if (isauto) {
                return;
            }
            isauto = true;
            backgroundHandler.postDelayed(periodicClassify, 300);

            //  mHandler1.postDelayed(mRunnable, 300);//每两秒执行一次runnable.
        } else if (i == R.id.showpic) {
            isgray = !isgray;
        }
    }

    private final TextureView.SurfaceTextureListener surfaceTextureListener =
            new TextureView.SurfaceTextureListener() {

                @Override
                public void onSurfaceTextureAvailable(SurfaceTexture texture, int width,
                        int height) {
                    openCamera(width, height);
                }

                @Override
                public void onSurfaceTextureSizeChanged(SurfaceTexture texture, int width,
                        int height) {
                    configureTransform(width, height);
                }

                @Override
                public boolean onSurfaceTextureDestroyed(SurfaceTexture texture) {
                    return true;
                }

                @Override
                public void onSurfaceTextureUpdated(SurfaceTexture texture) {
                }
            };

    private void openCamera(int width, int height) {
        checkedPermissions = true;

        Log.i("摄像机的参数:AutoFitTextureView的大小",
                "width:" + width + "height:" + height);
        AutoFitTextureViewWidth = width;
        AutoFitTextureViewHeight = height;
        setUpCameraOutputs(width, height);
        configureTransform(width, height);
        Activity activity = this;
        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
        try {
            if (!cameraOpenCloseLock.tryAcquire(2500, TimeUnit.MILLISECONDS)) {
                throw new RuntimeException("Time out waiting to lock camera opening.");
            }
            manager.openCamera(cameraId, stateCallback, backgroundHandler);
        } catch (CameraAccessException e) {
            Log.e(TAG, "Failed to open Camera", e);
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera opening.", e);
        }
    }

    /**
     * Configures the necessary {@link android.graphics.Matrix} transformation to `textureView`.
     * This
     * method should be called after the camera preview size is determined in setUpCameraOutputs
     * and
     * also the size of `textureView` is fixed.
     *
     * @param viewWidth  The width of `textureView`
     * @param viewHeight The height of `textureView`
     */
    private void configureTransform(int viewWidth, int viewHeight) {
        Activity activity = this;
        if (null == textureView || null == previewSize || null == activity) {
            return;
        }
        int rotation = activity.getWindowManager().getDefaultDisplay().getRotation();
        Matrix matrix = new Matrix();
        RectF viewRect = new RectF(0, 0, viewWidth, viewHeight);
        RectF bufferRect = new RectF(0, 0, previewSize.getHeight(), previewSize.getWidth());
        float centerX = viewRect.centerX();
        float centerY = viewRect.centerY();
        if (Surface.ROTATION_90 == rotation || Surface.ROTATION_270 == rotation) {
            bufferRect.offset(centerX - bufferRect.centerX(), centerY - bufferRect.centerY());
            matrix.setRectToRect(viewRect, bufferRect, Matrix.ScaleToFit.FILL);
            float scale =
                    Math.max(
                            (float) viewHeight / previewSize.getHeight(),
                            (float) viewWidth / previewSize.getWidth());
            matrix.postScale(scale, scale, centerX, centerY);
            matrix.postRotate(90 * (rotation - 2), centerX, centerY);
        } else if (Surface.ROTATION_180 == rotation) {
            matrix.postRotate(180, centerX, centerY);
        }
        textureView.setTransform(matrix);
    }

    private void setUpCameraOutputs(int width, int height) {
        Activity activity = this;
        CameraManager manager = (CameraManager) activity.getSystemService(Context.CAMERA_SERVICE);
        try {
            for (String cameraId : manager.getCameraIdList()) {
                CameraCharacteristics characteristics = manager.getCameraCharacteristics(cameraId);

                // We don't use a front facing camera in this sample.
                Integer facing = characteristics.get(CameraCharacteristics.LENS_FACING);
                if (facing != null && facing == CameraCharacteristics.LENS_FACING_FRONT) {
                    continue;
                }

                StreamConfigurationMap map =
                        characteristics.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
                if (map == null) {
                    continue;
                }

                // // For still image captures, we use the largest available size.
                Size largest =
                        Collections.max(
                                Arrays.asList(map.getOutputSizes(ImageFormat.JPEG)),
                                new CompareSizesByArea());
                imageReader =
                        ImageReader.newInstance(
                                largest.getWidth(), largest.getHeight(), ImageFormat.JPEG,
                                /*maxImages*/
                                2);

                // Find out if we need to swap dimension to get the preview size relative to sensor
                // coordinate.
                int displayRotation = activity.getWindowManager().getDefaultDisplay().getRotation();
                // noinspection ConstantConditions
        /* Orientation of the camera sensor */
                int sensorOrientation = characteristics.get(
                        CameraCharacteristics.SENSOR_ORIENTATION);
                boolean swappedDimensions = false;
                switch (displayRotation) {
                    case Surface.ROTATION_0:
                    case Surface.ROTATION_180:
                        if (sensorOrientation == 90 || sensorOrientation == 270) {
                            swappedDimensions = true;
                        }
                        break;
                    case Surface.ROTATION_90:
                    case Surface.ROTATION_270:
                        if (sensorOrientation == 0 || sensorOrientation == 180) {
                            swappedDimensions = true;
                        }
                        break;
                    default:
                        Log.e(TAG, "Display rotation is invalid: " + displayRotation);
                }

                Point displaySize = new Point();
                activity.getWindowManager().getDefaultDisplay().getSize(displaySize);
                int rotatedPreviewWidth = width;
                int rotatedPreviewHeight = height;
                int maxPreviewWidth = displaySize.x;
                int maxPreviewHeight = displaySize.y;

                if (swappedDimensions) {
                    rotatedPreviewWidth = height;
                    rotatedPreviewHeight = width;
                    maxPreviewWidth = displaySize.y;
                    maxPreviewHeight = displaySize.x;
                }

                if (maxPreviewWidth > MAX_PREVIEW_WIDTH) {
                    maxPreviewWidth = MAX_PREVIEW_WIDTH;
                }

                if (maxPreviewHeight > MAX_PREVIEW_HEIGHT) {
                    maxPreviewHeight = MAX_PREVIEW_HEIGHT;
                }

                previewSize =
                        chooseOptimalSize(
                                map.getOutputSizes(SurfaceTexture.class),
                                rotatedPreviewWidth,
                                rotatedPreviewHeight,
                                maxPreviewWidth,
                                maxPreviewHeight,
                                largest);

                // We fit the aspect ratio of TextureView to the size of preview we picked.
                int orientation = getResources().getConfiguration().orientation;
                if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
                    textureView.setAspectRatio(previewSize.getWidth(), previewSize.getHeight());
                } else {
                    textureView.setAspectRatio(previewSize.getHeight(), previewSize.getWidth());
                }

                this.cameraId = cameraId;
                return;
            }
        } catch (CameraAccessException e) {
            Log.e(TAG, "Failed to access Camera", e);
        } catch (NullPointerException e) {
            // Currently an NPE is thrown when the Camera2API is used but not supported on the
            // device this code runs.
            Toast.makeText(AutoActivity.this, "NullPointerException", Toast.LENGTH_SHORT).show();
        }
    }

    private static class CompareSizesByArea implements Comparator<Size> {

        @Override
        public int compare(Size lhs, Size rhs) {
            // We cast here to ensure the multiplications won't overflow
            return Long.signum(
                    (long) lhs.getWidth() * lhs.getHeight()
                            - (long) rhs.getWidth() * rhs.getHeight());
        }
    }

    private static Size chooseOptimalSize(
            Size[] choices,
            int textureViewWidth,
            int textureViewHeight,
            int maxWidth,
            int maxHeight,
            Size aspectRatio) {

        // Collect the supported resolutions that are at least as big as the preview Surface
        List<Size> bigEnough = new ArrayList<>();
        // Collect the supported resolutions that are smaller than the preview Surface
        List<Size> notBigEnough = new ArrayList<>();
        int w = aspectRatio.getWidth();
        int h = aspectRatio.getHeight();
        for (Size option : choices) {
            if (option.getWidth() <= maxWidth
                    && option.getHeight() <= maxHeight
                    && option.getHeight() == option.getWidth() * h / w) {
                if (option.getWidth() >= textureViewWidth
                        && option.getHeight() >= textureViewHeight) {
                    bigEnough.add(option);
                } else {
                    notBigEnough.add(option);
                }
            }
        }

        // Pick the smallest of those big enough. If there is no one big enough, pick the
        // largest of those not big enough.
        if (bigEnough.size() > 0) {
            return Collections.min(bigEnough, new CompareSizesByArea());
        } else if (notBigEnough.size() > 0) {
            return Collections.max(notBigEnough, new CompareSizesByArea());
        } else {
            Log.e(TAG, "Couldn't find any suitable preview size");
            return choices[0];
        }
    }

    private final CameraDevice.StateCallback stateCallback =
            new CameraDevice.StateCallback() {

                @Override
                public void onOpened(@NonNull CameraDevice currentCameraDevice) {
                    // This method is called when the camera is opened.  We start camera preview
                    // here.
                    cameraOpenCloseLock.release();
                    cameraDevice = currentCameraDevice;
                    createCameraPreviewSession();
                }

                @Override
                public void onDisconnected(@NonNull CameraDevice currentCameraDevice) {
                    cameraOpenCloseLock.release();
                    currentCameraDevice.close();
                    cameraDevice = null;
                }

                @Override
                public void onError(@NonNull CameraDevice currentCameraDevice, int error) {
                    cameraOpenCloseLock.release();
                    currentCameraDevice.close();
                    cameraDevice = null;
                    AutoActivity.this.finish();
                }
            };

    private void createCameraPreviewSession() {
        try {
            SurfaceTexture texture = textureView.getSurfaceTexture();
            assert texture != null;

            // We configure the size of default buffer to be the size of camera preview we want.
            texture.setDefaultBufferSize(previewSize.getWidth(), previewSize.getHeight());

            // This is the output Surface we need to start preview.
            Surface surface = new Surface(texture);

            // We set up a CaptureRequest.Builder with the output Surface.
            previewRequestBuilder = cameraDevice.createCaptureRequest(
                    CameraDevice.TEMPLATE_PREVIEW);
            previewRequestBuilder.addTarget(surface);

            // Here, we create a CameraCaptureSession for camera preview.
            cameraDevice.createCaptureSession(
                    Arrays.asList(surface),
                    new CameraCaptureSession.StateCallback() {

                        @Override
                        public void onConfigured(
                                @NonNull CameraCaptureSession cameraCaptureSession) {
                            // The camera is already closed
                            if (null == cameraDevice) {
                                return;
                            }

                            // When the session is ready, we start displaying the preview.
                            captureSession = cameraCaptureSession;
                            try {
                                // Auto focus should be continuous for camera preview.
                                previewRequestBuilder.set(
                                        CaptureRequest.CONTROL_AF_MODE,
                                        CaptureRequest.CONTROL_AF_MODE_CONTINUOUS_PICTURE);

                                // Finally, we start displaying the camera preview.
                                previewRequest = previewRequestBuilder.build();
                                captureSession.setRepeatingRequest(
                                        previewRequest, captureCallback, backgroundHandler);
                            } catch (CameraAccessException e) {
                                Log.e(TAG, "Failed to set up config to capture Camera", e);
                            }
                        }

                        @Override
                        public void onConfigureFailed(
                                @NonNull CameraCaptureSession cameraCaptureSession) {

                        }
                    },
                    null);
        } catch (CameraAccessException e) {
            Log.e(TAG, "Failed to preview Camera", e);
        }
    }

    private CameraCaptureSession.CaptureCallback captureCallback =
            new CameraCaptureSession.CaptureCallback() {

                @Override
                public void onCaptureProgressed(
                        @NonNull CameraCaptureSession session,
                        @NonNull CaptureRequest request,
                        @NonNull CaptureResult partialResult) {
                }

                @Override
                public void onCaptureCompleted(
                        @NonNull CameraCaptureSession session,
                        @NonNull CaptureRequest request,
                        @NonNull TotalCaptureResult result) {
                }
            };


    private void classifyFrame() {


        Observable.create(new Observable.OnSubscribe<ImageBean>() {
            @Override
            public void call(Subscriber<? super  ImageBean > subscriber) {
//
                Bitmap bitmap = textureView.getBitmap(mCameraWidth,
                        mCameraHeight);
                Log.i("摄像机的参数:生成的照片的大小",
                        "宽:" + bitmap.getWidth() + "高:" + bitmap.getHeight());
                Log.i("摄像机的参数:在生成的照片上截取的矩形的大小", "x:" + (int) (div(bitmap.getWidth(),
                        mCameraWidth,
                        5) * x1) + "y:" + (int) (div(bitmap.getHeight(), mCameraHeight, 5))
                        * y1
                        + "width:" + (int) ((x2 - x1) * div(bitmap.getWidth(), mCameraWidth,
                        5))
                        + "height:" + (int) ((y2 - y1) * div(bitmap.getHeight(),
                        mCameraHeight,
                        5)));
                Bitmap rectBitmap = Bitmap.createBitmap
                        (bitmap, (int) (div(bitmap.getWidth(), mCameraWidth, 5) * x1),
                                (int) (div(bitmap.getHeight(), mCameraHeight, 5) * y1 + (
                                        mCameraHeight
                                                - AutoFitTextureViewHeight)),
                                (int) ((x2 - x1) * div(bitmap.getWidth(), mCameraWidth, 5)),
                                (int) ((y2 - y1 + 10) * div(bitmap.getHeight(), mCameraHeight, 5)));

                int imageWidth = rectBitmap.getWidth();
                int imageHeight = rectBitmap.getHeight();
                final int gilight = FileUtil.getPicHilight(AutoActivity.this, rectBitmap,
                        imageWidth,
                        imageHeight);
                存储照片的宽 = 200;
                存储照片的高 = 30;
                if (gilight >= 170 && gilight < 200) {
                    tmp = 125;
                } else if (gilight >= 130 && gilight < 170) {
                    tmp = 105;
                } else if (gilight >= 100 && gilight < 130) {
                    tmp = 95;
                } else if (gilight >= 80 && gilight < 100) {
                    tmp = 80;
                } else if (gilight >= 60 && gilight < 80) {
                    tmp = 50;
                } else if (gilight >= 30 && gilight < 60) {
                    tmp = 40;
                } else if (gilight >= 200) {
                    tmp = 140;
                }
                Bitmap finalimg = null;
                if (isgray) {
                    finalimg = FileUtil.convertToBMW(rectBitmap, 存储照片的宽, 存储照片的高, tmp);

                } else {
                    finalimg = FileUtil.convertGreyImg(rectBitmap, 存储照片的宽, 存储照片的高);

                }


                String realpath = FileUtil.saveBitmap(AutoActivity.this, finalimg);

                Log.i("摄像机的参数:生成的照片能查看到的真实路径", "realpath:" + realpath);
                Log.i("摄像机的参数:生成的照片亮度", "gilight:" + gilight);

                if (!bitmap.isRecycled()) {
                    bitmap.recycle();
                }
                if (!rectBitmap.isRecycled()) {
                    rectBitmap.recycle();
                }
                long threadId = Thread.currentThread().getId();
                Log.i("摄像机的参数:运行的线程", "运行的线程:" + threadId);

//                Bitmap imageFromAssetsFile = getImageFromAssetsFile(
//                        "6.jpg");
//                 finalimg = FileUtil.convertGreyImg(imageFromAssetsFile, 存储照片的宽, 存储照片的高);

//                int[] ints = FileUtil.convertGreyImg(imageFromAssetsFile);

                String text = classifier.recognizeImage(
                        finalimg);
                ImageBean imageBean = new ImageBean();
                imageBean.image=finalimg;
                imageBean.text=text;

                subscriber.onNext(imageBean);
                subscriber.onCompleted();
            }
        }).subscribeOn(Schedulers.newThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(new Observer<ImageBean>() {
                    @Override
                    public void onCompleted() {
                        Log.i("摄像机的参数:生成完成", "");
                    }

                    @Override
                    public void onError(Throwable e) {

                    }

                    @Override
                    public void onNext(ImageBean imageBean) {
                        lighttext.setText(imageBean.text);
                        showpic.setImageBitmap(imageBean.image);

                    }
                });
    }


    private Bitmap getImageFromAssetsFile(String fileName) {
        Bitmap image = null;
        AssetManager am = getResources().getAssets();
        try {
            InputStream is = am.open(fileName);
            image = BitmapFactory.decodeStream(is);
            is.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

        return image;

    }

    /**
     * Closes the current {@link CameraDevice}.
     */
    private void closeCamera() {
        try {
            cameraOpenCloseLock.acquire();
            if (null != captureSession) {
                captureSession.close();
                captureSession = null;
            }
            if (null != cameraDevice) {
                cameraDevice.close();
                cameraDevice = null;
            }
            if (null != imageReader) {
                imageReader.close();
                imageReader = null;
            }
        } catch (InterruptedException e) {
            throw new RuntimeException("Interrupted while trying to lock camera closing.", e);
        } finally {
            cameraOpenCloseLock.release();
        }
    }

    public static double div(double v1, double v2, int scale) {
        if (scale < 0) {
            throw new IllegalArgumentException(
                    "The scale must be a positive integer or zero");
        }
        BigDecimal b1 = new BigDecimal(Double.toString(v1));
        BigDecimal b2 = new BigDecimal(Double.toString(v2));
        return b1.divide(b2, scale, BigDecimal.ROUND_HALF_UP).doubleValue();
    }

}
